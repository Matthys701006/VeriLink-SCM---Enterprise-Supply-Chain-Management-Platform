// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';

// Get environment variables
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

console.log('Initializing Supabase client with URL:', supabaseUrl);

// Validate environment variables
if (!supabaseUrl || !supabaseAnonKey) {
  console.error('Missing Supabase environment variables!', { 
    url: supabaseUrl ? 'set' : 'missing',
    key: supabaseAnonKey ? 'set' : 'missing'
  });
}

// Create a single instance of the Supabase client
export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
  },
  global: {
    headers: {
      'x-application-name': 'verilink-scm'
    },
  },
});

// Export a helper to check connection
export const checkConnection = async () => {
  try {
    console.log('Testing connection to Supabase...');
    
    // Use a more basic query that doesn't depend on application tables
    const { data, error } = await supabase.rpc('version');
    
    if (error) {
      console.error('Supabase connection test error:', error);
      return { connected: false, error: error.message };
    }
    
    console.log('Successfully connected to Supabase:', data);
    return { connected: true, data };
  } catch (err) {
    console.error('Unexpected error testing Supabase connection:', err);
    return { connected: false, error: err?.message || 'Unknown error' };
  }
};

// Run initial connection check
checkConnection()
  .then(status => {
    console.log('Initial connection check:', status.connected ? 'Connected ✅' : 'Failed ❌');
    
    if (!status.connected) {
      console.error('Connection details:', {
        url: supabaseUrl,
        keyProvided: !!supabaseAnonKey,
        error: status.error
      });
    }
  })
  .catch(err => {
    console.error('Error during initial connection check:', err);
  });